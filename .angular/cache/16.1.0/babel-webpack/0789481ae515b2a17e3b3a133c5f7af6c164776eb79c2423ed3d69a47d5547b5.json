{"ast":null,"code":"import { catchError, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ResourceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://anapioficeandfire.com/api';\n  }\n  getResources() {\n    return this.http.get(this.apiUrl).pipe(tap(_ => console.log('fetched heroes')), catchError(this.handleError('getResources', [])));\n  }\n  getResource(id) {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => console.log(`fetched hero id=${id}`)), catchError(this.handleError(`getResource id=${id}`)));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n}\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  return new (t || ResourceService)(i0.ɵɵinject(i1.HttpClient));\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","of","tap","ResourceService","constructor","http","apiUrl","getResources","get","pipe","_","console","log","handleError","getResource","id","url","operation","result","error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/owtbslolt003/Documents/DEV/Angular Training/GOT_FAN_APP/src/app/resource.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, catchError, of, tap } from 'rxjs';\nimport { Resource } from './resources';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceService {\n\n  constructor(private http: HttpClient) { }\n\n  private apiUrl = 'https://anapioficeandfire.com/api';\n\n  getResources(): Observable<Resource[]> {\n    return this.http.get<Resource[]>(this.apiUrl).pipe(\n      tap(_ => console.log('fetched heroes')),\n      catchError(this.handleError<Resource[]>('getResources', []))\n    );\n  }\n\n  getResource(id: number): Observable<Resource> {\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.get<Resource>(url).pipe(\n      tap(_ => console.log(`fetched hero id=${id}`)),\n      catchError(this.handleError<Resource>(`getResource id=${id}`))\n    );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n  \n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n  \n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n  \n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  //https://anapioficeandfire.com/\n\n  //Use case 0 ✅\n    //Create the general layout\n\n  //Use case 1 ✅\n    //The user opens your app and gets a login screen. He has to login. After a successful login he is navigated to the overview page (UC2)\n    //(Bonus: If the user is logged in, he can refresh the browser and has not to login again)\n    //(Note: To simplify this task, handle the authentication locally in your app and not consume any external services like auth0)\n\n  //Use case 2\n    //The user has a list of Game of thrones resources, for each resource he can show a list where he can filter elements of the list\n\n  //Use case 3\n    //The list(s) in UC2 should be extended. Add a search element, which searches anything in your resources\n\n  //Use case 4\n    //The user clicks on a resource item and gets a detail view over it.   \n}\n"],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAMtD,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAEhB,KAAAC,MAAM,GAAG,mCAAmC;EAFZ;EAIxCC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,MAAM,CAAC,CAACG,IAAI,CAChDP,GAAG,CAACQ,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAC,EACvCZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAa,cAAc,EAAE,EAAE,CAAC,CAAC,CAC7D;EACH;EAEAC,WAAWA,CAACC,EAAU;IACpB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACV,MAAM,IAAIS,EAAE,EAAE;IAClC,OAAO,IAAI,CAACV,IAAI,CAACG,GAAG,CAAWQ,GAAG,CAAC,CAACP,IAAI,CACtCP,GAAG,CAACQ,CAAC,IAAIC,OAAO,CAACC,GAAG,CAAC,mBAAmBG,EAAE,EAAE,CAAC,CAAC,EAC9Cf,UAAU,CAAC,IAAI,CAACa,WAAW,CAAW,kBAAkBE,EAAE,EAAE,CAAC,CAAC,CAC/D;EACH;EAEQF,WAAWA,CAAII,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAR,OAAO,CAACQ,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACAR,OAAO,CAACC,GAAG,CAAC,GAAGK,SAAS,YAAYE,KAAK,CAACC,OAAO,EAAE,CAAC;MAEpD;MACA,OAAOnB,EAAE,CAACiB,MAAW,CAAC;IACxB,CAAC;EACH;;AAjCWf,eAAe,C;mBAAfA,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAfrB,eAAe,C;SAAfA,eAAe;EAAAsB,OAAA,EAAftB,eAAe,CAAAuB,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}